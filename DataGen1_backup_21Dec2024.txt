
var center = ee.Geometry.Point([-78.66638044690248, 35.80269787969758]);
//var center = ee.Geometry.Point([-122.50, 37.77]);
//var center = ee.Geometry.Point([-76.60566533391743,35.98033251597695]);
//var center = ee.Geometry.Point([-81.10,34.02]);

// Define the bounding box with a buffer radius (2560 meters for 512x512 pixels at 10m resolution)
var geometry = center.buffer(2560).bounds();

// Load Sentinel-2 MSI Level-2A as imageCollection
var sentinel2 = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
  .filterBounds(geometry)
  .filterDate('2019-08-01', '2019-08-30')  // Specify a date range
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 10))  // Filter low cloud cover
  .median();  // Use median to create a composite image

// Calculate enhanced RGB
var enhancedRGB = sentinel2.select('B4').multiply(2.0)  // Enhance Red
                  .addBands(sentinel2.select('B3').multiply(2.0))  // Enhance Green
                  .addBands(sentinel2.select('B2').multiply(2.0));  // Enhance Blue

var vizParams = {
  bands: ['B4', 'B3', 'B2'],
  min: 0,
  max: 3000,
  gamma: 1
};


//**************LULC***********************

// Calculate indices
var ndvi = sentinel2.normalizedDifference(['B8', 'B4']).rename('NDVI');
var ndbi = sentinel2.normalizedDifference(['B11', 'B8']).rename('NDBI');
var ndwi = sentinel2.normalizedDifference(['B3', 'B8']).rename('NDWI');
var bu = ndvi.subtract(ndbi).rename('BU');

var swm = sentinel2.expression(
  '(B2 + B3) / (B8 + B11)', 
  {
    'B2': sentinel2.select('B2'), // Blue Band
    'B3': sentinel2.select('B3'), // Green Band
    'B8': sentinel2.select('B8'), // NIR Band
    'B11': sentinel2.select('B11') // SWIR Band
  }
).rename('SWM');


// Combine bands into a single image
var indices = ndvi.addBands(ndbi).addBands(ndwi).addBands(bu).addBands(swm);

// Classify land cover
var classified = indices.expression(
  "(swm >= 1.0) ? 1 : " +  // Water
  "(bu < 1.0) ? 2 : " +  // Build-Up
  "(ndvi >= 0.4 && ndvi < 0.7) ? 3 : " + // Sparse Vegetation
  "(ndvi >= 0.7) ? 4 : 0",               // Dense Vegetation
  {
    'ndvi': indices.select('NDVI'),
    'ndbi': indices.select('NDBI'),
    'ndwi': indices.select('NDWI'),
    'swm': indices.select('SWM'),
    'bu':indices.select('BU')
  }
).rename('Land_Cover');

// Visualization parameters for classified map
var landCoverVis = {
  min: 0,
  max: 4,
  palette: ['black', 'blue', 'red', 'yellow', 'green']  // Unclassified, Water, Build-Up, Sparse Vegetation, Dense Vegetation
};


// Display layers
Map.centerObject(geometry, 13);
Map.addLayer(enhancedRGB.clip(geometry), vizParams, 'EnhancedRGB');
Map.addLayer(classified.clip(geometry), landCoverVis, 'Land Cover Classification');



//************LEGACY CODE*******************


// // Classify NDVI into three categories
// var ndviClassified = ndvi.expression(
//   "(ndvi < 0.4) ? 1 : (ndvi <= 0.7) ? 2 : 3", 
//   {'ndvi': ndvi}
// ).rename('NDVI_Classified');

// // Visualization parameters for the classified NDVI
// var ndviClassVis = {
//   min: 1,
//   max: 3,
//   palette: ['white', 'lightgreen', 'darkgreen']  // Assign colors to each class
// };

// // Classify NDVI into five categories
// var ndviClassified = ndvi.expression(
//   //"(ndvi >= -1 && ndvi < -0.2) ? 1 : " +  // Water
//   "(ndvi < 0.4) ? 1 : " + // Building
//   "(ndvi >= 0.4 && ndvi < 0.4) ? 2 : " + // Sparse Vegetation
//   "(ndvi >= 0.5 && ndvi < 0.7) ? 3 : " + // Moderate Vegetation
//   "(ndvi >= 0.7 && ndvi <= 1) ? 4 : 0",  // Dense Vegetation
//   {'ndvi': ndvi}
// ).rename('NDVI_Classified');

// // Visualization parameters for the classified NDVI
// var ndviClassVis = {
//   min: 1,
//   max: 4,
//   palette: ['black', 'grey', 'lightgreen', 'darkgreen']  // Assign colors to each class
// };


// // Classify BU into two categories: built-up (1) and non built-up (0)
// var buClassified = bu.expression(
//   "(bu > 0) ? 1 : 2", 
//   {'bu': bu}
// ).rename('BU_Classified');
// // Visualization parameters for BU
// var buClassVis = {
//   min: 1,
//   max: 2,
//   palette: ['white', 'blue']  // Blue for negative, white for neutral, red for positive
// };


// var ndwiClassified = ndwi.expression(
//   "(ndwi < 0) ? 1 : 2", 
//   {'ndwi': ndwi}
// ).rename('BU_Classified');

// // Visualization parameters for the classified NDWI
// var ndwiClassVis = {
//   min: 1,
//   max: 2,
//   palette: ['white', 'lightblue']  // Assign colors to each class
// };


//Visualization parameters for SWM
// var swmVis = {
//   min: 0,
//   max: 2,
//   palette: ['white', 'lightblue', 'blue', 'darkblue'] // White to dark blue gradient
// };
// Classify SWM into three categories
// var swmClassified = swm.expression(
//   "(swm < 1.0) ? 1 : 2", 
//   {'swm': swm}
// ).rename('SWM_Classified');

// Visualization parameters for the classified SWM
// var swmClassVis = {
//   min: 1,
//   max: 2,
//   palette: ['white', 'lightblue']  // Assign colors to each class
// };



// //Center map on the region and display layers
//Map.centerObject(geometry, 13);
//Map.addLayer(enhancedRGB, vizParams, 'EnhancedRGB');
//Map.addLayer(ndviClassified, ndviClassVis, 'NDVI Classified');
//Map.addLayer(ndwiClassified, ndwiClassVis, 'NDWI Classified');
//Map.addLayer(buClassified, buClassVis, 'BU Classified');
//Map.addLayer(swmClassified, swmClassVis, 'SWM Classified');